services:
  db:
    image: mariadb:10.11
    container_name: seafile-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_LOG_CONSOLE=true
      # To upgrade mariadb from an older version, uncomment the line below
      #- MARIADB_AUTO_UPGRADE=1
    volumes:
      - ${SEAFILE_DB_DATA:-./data/db}:/var/lib/mysql
    networks:
      - seafile-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  memcached:
    image: memcached:1.6
    container_name: seafile-memcached
    restart: unless-stopped
    entrypoint: memcached -m 256
    networks:
      - seafile-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  seafile:
    image: h44z/seafile-ce:${SEAFILE_VERSION:-11.0.9}
    container_name: seafile
    restart: unless-stopped
    volumes:
      - ${SEAFILE_SHARED_DATA:-./data/seafile}:/seafile
      - ${SEAFILE_LOG_DIR:-./seafile-logs}:/opt/seafile/logs
    env_file:
      - .env
    depends_on:
      - memcached
    networks:
      - seafile-net
      - proxy-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy-net
      # HTTP Router Seafile/Seahub
      - traefik.http.routers.seafile.rule=(Host(`seafile.${DOMAINNAME}`))
      - traefik.http.routers.seafile.entrypoints=websecure
      - traefik.http.routers.seafile.tls=true
      - traefik.http.routers.seafile.tls.certresolver=letsencryptresolver
      - traefik.http.routers.seafile.service=seafile
      - traefik.http.routers.seafile.middlewares=sec-headers
      - traefik.http.services.seafile.loadbalancer.server.port=8000
      # HTTP Router Seafdav
      - traefik.http.routers.seafile-dav.rule=Host(`seafile.${DOMAINNAME}`) && PathPrefix(`/seafdav`)
      - traefik.http.routers.seafile-dav.entrypoints=websecure
      - traefik.http.routers.seafile-dav.tls=true
      - traefik.http.routers.seafile-dav.tls.certresolver=letsencryptresolver
      - traefik.http.routers.seafile-dav.service=seafile-dav
      - traefik.http.services.seafile-dav.loadbalancer.server.port=8080
      # HTTP Router Seafhttp
      - traefik.http.routers.seafile-http.rule=Host(`seafile.${DOMAINNAME}`) && PathPrefix(`/seafhttp`)
      - traefik.http.routers.seafile-http.entrypoints=websecure
      - traefik.http.routers.seafile-http.tls=true
      - traefik.http.routers.seafile-http.tls.certresolver=letsencryptresolver
      - traefik.http.routers.seafile-http.middlewares=seafile-strip
      - traefik.http.routers.seafile-http.service=seafile-http
      - traefik.http.services.seafile-http.loadbalancer.server.port=8082
      # Middlewares 
      - traefik.http.middlewares.seafile-strip.stripprefix.prefixes=/seafhttp
      - traefik.http.middlewares.sec-headers.headers.sslredirect=true
      - traefik.http.middlewares.sec-headers.headers.browserXssFilter=true
      - traefik.http.middlewares.sec-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.sec-headers.headers.forceSTSHeader=true
      - traefik.http.middlewares.sec-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.sec-headers.headers.stsPreload=true
      - traefik.http.middlewares.sec-headers.headers.referrerPolicy=same-origin

  # Remove this section if you do not want to use only office integration
  onlyoffice-documentserver:
    image: onlyoffice/documentserver:latest
    restart: unless-stopped
    container_name: seafile-oods
    #volumes:
      # Optional: see https://manual.seafile.com/deploy/only_office/
      #- ${ONLYOFFICE_CONFIG:-./data/onlyoffice/local.conf}:/etc/onlyoffice/documentserver/local.json
    environment:
      - JWT_ENABLED=true
      - JWT_SECRET=${ONLYOFFICE_JWT_SECRET:-Supers3cr3t}
    networks:
      - seafile-net
      - proxy-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy-net
      # HTTP Router OnlyOffice
      - traefik.http.routers.seafile-oods.rule=Host(`oods.seafile.${DOMAINNAME}`)
      - traefik.http.routers.seafile-oods.entrypoints=websecure
      - traefik.http.routers.seafile-oods.tls=true
      - traefik.http.routers.seafile-oods.tls.certresolver=letsencryptresolver
      - traefik.http.routers.seafile-oods.service=seafile-oods
      - traefik.http.routers.seafile-oods.middlewares=sec-headers,oods-headers
      - traefik.http.services.seafile-oods.loadbalancer.server.port=80
      # Middlewares
      - traefik.http.middlewares.oods-headers.headers.customrequestheaders.X-Forwarded-Host=oods.seafile.${DOMAINNAME}
      - traefik.http.middlewares.oods-headers.headers.customrequestheaders.X-Forwarded-Proto=https

  reverse-proxy:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - '--log.level=DEBUG'
      - '--api=true'
      - '--api.dashboard=true'
      - '--accesslog=true'
      - '--accesslog.filepath=/logs/access.log'
      - '--accesslog.bufferingsize=100'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true'
      - '--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.letsencryptresolver.acme.email=seafile.noreply@${DOMAINNAME}'
      - '--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json'
      # - '--certificatesresolvers.letsencryptresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory'  # just for testing
    ports:
      - 80:80
      - 443:443
    volumes:
      - acme-certs:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${TRAEFIK_LOG_DIR:-./traefik-logs}:/logs
    networks:
      - seafile-net
      - proxy-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy-net
      # HTTP Catchall for redirecting HTTP -> HTTPS
      - traefik.http.routers.dashboard-catchall.rule=Host(`seafile.${DOMAINNAME}`) && PathPrefix(`/`)
      - traefik.http.routers.dashboard-catchall.entrypoints=web
      - traefik.http.routers.dashboard-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # Traefik dashboard
      - traefik.http.routers.dashboard.rule=Host(`traefik.seafile.${DOMAINNAME}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.tls.certresolver=letsencryptresolver
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.middlewares=dashboard-auth
      - traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$2y$$05$$lFk8xsNVKvkyn.UzSmgsHePS9ZNkANQ.C9ZfcWC9BsLa6jKhwTUQG # defaults to admin:traefik, regenerate using apache-utils: echo $(htpasswd -nB admin) | sed -e s/\\$/\\$\\$/g

networks:
  seafile-net:
    name: seafile-net
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/16
  proxy-net:
    name: proxy-net
    ipam:
      driver: default
      config:
        - subnet: 172.32.0.0/16

volumes:
  acme-certs:

